
####################################################################################################
####################################################################################################
###### Identify discriminatory leaf chemicals which separates stressed and control condition #######
###### With Mann-Whitney test ######################################################################
###### Then apply FDR (Benjamini-Hochberg) and Bonferroni Correction separately ####################
####################################################################################################
####################################################################################################

import pandas as pd
import numpy as np
from scipy.stats import mannwhitneyu 
import os

# Load the data
file_path = r'C:\Users\ms\Desktop\data_chem\data\data\n_p_r.csv'
data = pd.read_csv(file_path)

# Separate data into stressed and control groups
# Assuming 'Treatment' column exists to indicate stressed (1) and control (0) conditions
stressed_data = data[data['Treatment'] == 1]
control_data = data[data['Treatment'] == 0]

# List of metabolite columns (assuming they are named as P_Cluster_xxx or N_Cluster_xxx)
metabolite_columns = [col for col in data.columns if col.startswith('P_Cluster') or col.startswith('N_Cluster')]

# Prepare a list to collect results
results = []

# Perform Mann-Whitney U test for each metabolite
for metabolite in metabolite_columns:
    stat, p_value = mannwhitneyu(stressed_data[metabolite], control_data[metabolite], alternative='two-sided')
    results.append({'Metabolite': metabolite, 'Mann-Whitney U Statistic': stat, 'P-Value': p_value})

# Convert results to a DataFrame
results_df = pd.DataFrame(results)

# Apply Bonferroni correction
alpha = 0.05
bonferroni_threshold = alpha / len(metabolite_columns)
results_df['Bonferroni Corrected P-Value'] = results_df['P-Value'] * len(metabolite_columns)
results_df['Significant (Bonferroni)'] = results_df['Bonferroni Corrected P-Value'] < alpha

# Apply FDR (Benjamini-Hochberg)
results_df = results_df.sort_values('P-Value').reset_index(drop=True)
n = len(results_df)
results_df['Rank'] = results_df.index + 1
results_df['FDR (Benjamini-Hochberg)'] = (results_df['P-Value'] * n) / results_df['Rank']
results_df['Significant (FDR)'] = results_df['FDR (Benjamini-Hochberg)'] < alpha

# Ensure FDR values do not exceed 1
results_df['FDR (Benjamini-Hochberg)'] = results_df['FDR (Benjamini-Hochberg)'].clip(upper=1.0)

# Drop the Rank column as it was only needed for FDR calculation
results_df = results_df.drop(columns=['Rank'])

# Save the results to a single CSV file
output_dir = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\mann_whiteny\vip_bonferroni'
os.makedirs(output_dir, exist_ok=True)
output_file = os.path.join(output_dir, 'mann_whitney_bonferroni_fdr_results_root.csv')
results_df.to_csv(output_file, index=False)

print(f"Results saved to {output_file}")





###########################################################
###########################################################
####### Merges files generated by the above code ##########
###########################################################
###########################################################
import pandas as pd

# Define file paths
leaf_vip_path = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\updated_PLS\vip_scores_all_leaf.csv'
root_vip_path = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\updated_PLS\vip_scores_all_root.csv'
leaf_results_path = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\vip_bonferroni\mann_whitney_bonferroni_fdr_results_leaf.csv'
root_results_path = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\vip_bonferroni\mann_whitney_bonferroni_fdr_results_root.csv'

# Load the files
vip_scores_leaf = pd.read_csv(leaf_vip_path)
vip_scores_root = pd.read_csv(root_vip_path)
mann_whitney_leaf = pd.read_csv(leaf_results_path)
mann_whitney_root = pd.read_csv(root_results_path)

# Add a 'TissueType' column to VIP scores data
vip_scores_leaf['TissueType'] = 'Leaf'
vip_scores_root['TissueType'] = 'Root'

# Merge VIP scores for leaf and root into a single DataFrame
vip_combined = pd.concat([vip_scores_leaf, vip_scores_root])

# Rename the cluster column for consistency (Unnamed: 0 -> Metabolite)
vip_combined.rename(columns={'Unnamed: 0': 'Metabolite'}, inplace=True)

# Merge the VIP data with Mann-Whitney results for leaf and root
merged_leaf = pd.merge(vip_combined[vip_combined['TissueType'] == 'Leaf'], 
                       mann_whitney_leaf, on='Metabolite', how='left')

merged_root = pd.merge(vip_combined[vip_combined['TissueType'] == 'Root'], 
                       mann_whitney_root, on='Metabolite', how='left')

# Combine both leaf and root data into a single DataFrame
final_combined = pd.concat([merged_leaf, merged_root])

# Save the combined file
output_path = r'C:\Users\ms\Desktop\data_chem_3_10\output\results\vip_bonferroni\VIP_mann_whitney_bonferroni_fdr_combine.csv'
final_combined.to_csv(output_path, index=False)

print(f"Combined file saved at {output_path}")


##########################################################
##########################################################
###### VIP SCORE PLOT with portion #######################
###### Refined with bonferroni and FDR ###################
##########################################################
##########################################################

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def create_combined_vip_plot(vip_scores_combined, thresholds, colors, font_sizes, dot_size=15, output_path='vip_scores_plot.png'):
    # Ensure that VIP scores are treated as numeric
    vip_scores_combined['VIP_Score_leaf'] = pd.to_numeric(vip_scores_combined['VIP_Score_leaf'], errors='coerce')
    vip_scores_combined['VIP_Score_root'] = pd.to_numeric(vip_scores_combined['VIP_Score_root'], errors='coerce')
    
    fig = plt.figure(figsize=(20, 5))
    gs = fig.add_gridspec(2, 2, width_ratios=[3, 1], height_ratios=[1, 1])

    # Scatter plot
    ax_scatter = fig.add_subplot(gs[:, 0])
    x = np.arange(len(vip_scores_combined))
    ax_scatter.scatter(x, vip_scores_combined['VIP_Score_leaf'], color=colors[0], label='Leaf', alpha=0.7, s=dot_size*1.5)
    ax_scatter.scatter(x, vip_scores_combined['VIP_Score_root'], color=colors[1], label='Root', alpha=0.7, s=dot_size*1.5)

    for threshold, color in zip(thresholds, ['r', 'g']):
        ax_scatter.axhline(y=threshold, color=color, linestyle='--', linewidth=2)
        ax_scatter.text(len(vip_scores_combined), threshold, f'Threshold: {threshold}', 
                va='bottom', ha='right', color=color, fontsize=font_sizes['legend'])

    #ax_scatter.set_title('VIP Scores - Scatter Plot with Thresholds', fontsize=font_sizes['title'])
    ax_scatter.set_ylabel('VIP Score', fontsize=font_sizes['label'])
    ax_scatter.set_xlabel('Molecular Features', fontsize=font_sizes['label'])
    ax_scatter.set_xticks([])
    y_max = max(vip_scores_combined[['VIP_Score_leaf', 'VIP_Score_root']].max().max() * 1.1, max(thresholds) * 1.1)
    ax_scatter.set_ylim(0, y_max)
    ax_scatter.legend(loc='upper right', fontsize=font_sizes['legend'], markerscale=2)

    # Pie charts
    for i, threshold in enumerate(thresholds):
        ax_pie = fig.add_subplot(gs[i, 1])
        
        leaf_count = (vip_scores_combined['VIP_Score_leaf'] > threshold).sum()
        root_count = (vip_scores_combined['VIP_Score_root'] > threshold).sum()
        
        sizes = [leaf_count, root_count]
        labels = ['Leaf', 'Root']
        
        wedges, texts, autotexts = ax_pie.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
        ax_pie.set_title(f'VIP Scores > {threshold}', fontsize=font_sizes['title'])
        
        # Increase font size for pie chart labels and percentages
        plt.setp(texts, size=font_sizes['pie_label'])
        plt.setp(autotexts, size=font_sizes['pie_pct'])

    # Annotations
    annotation_text = []
    for threshold in thresholds:
        leaf_count = (vip_scores_combined['VIP_Score_leaf'] > threshold).sum()
        root_count = (vip_scores_combined['VIP_Score_root'] > threshold).sum()
        annotation_text.append(f"VIP > {threshold}:")
        annotation_text.append(f"Leaf: {leaf_count}")
        annotation_text.append(f"Root: {root_count}")
    
    ax_scatter.text(0.02, 0.98, '\n'.join(annotation_text), transform=ax_scatter.transAxes, 
                    va='top', ha='left', fontsize=font_sizes['annotation'],
                    bbox=dict(facecolor='white', alpha=0.8, edgecolor='none'))

    plt.tight_layout()
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.show()

# Load VIP scores from Bonferroni and FDR analyses
vip_scores_bonferroni = pd.read_csv(r'C:\Users\ms\Desktop\data_chem\output\results\vip_bonferroni\sig_vip_bonferroni.csv')
vip_scores_fdr = pd.read_csv(r'C:\Users\ms\Desktop\data_chem\output\results\vip_bonferroni\sig_vip_fdr.csv')

# Merge VIP scores on metabolite names to compare (assuming Metabolite as the key column)
vip_scores_combined_bonferroni = vip_scores_bonferroni.pivot(index='Metabolite', columns='Tissue_Type', values='VIP_Score').reset_index()
vip_scores_combined_fdr = vip_scores_fdr.pivot(index='Metabolite', columns='Tissue_Type', values='VIP_Score').reset_index()

# Rename columns for consistency
vip_scores_combined_bonferroni.columns = ['Metabolite', 'VIP_Score_leaf', 'VIP_Score_root']
vip_scores_combined_fdr.columns = ['Metabolite', 'VIP_Score_leaf', 'VIP_Score_root']

# Define color scheme and font sizes
colors = ['#72e883', '#54baaf']
font_sizes = {
    'title': 20,
    'label': 18,
    'tick': 16,
    'legend': 16,
    'annotation': 16,
    'pie_label': 15,
    'pie_pct': 15,
}

# Create combined plot with different thresholds for Bonferroni
thresholds = [1, 2]
create_combined_vip_plot(vip_scores_combined_bonferroni, thresholds, colors, font_sizes, dot_size=30,
                         output_path=r'C:\Users\ms\Desktop\data_chem\output\results\vip_bonferroni\vip_scores_plot_bonferroni.png')

# Create combined plot with different thresholds for FDR
create_combined_vip_plot(vip_scores_combined_fdr, thresholds, colors, font_sizes, dot_size=30,
                         output_path=r'C:\Users\ms\Desktop\data_chem\output\results\vip_bonferroni\vip_scores_plot_fdr.png')

print("Plots saved successfully!")
